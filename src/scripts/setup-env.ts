#!/usr/bin/env bun
/**
 * Environment setup script
 * Creates .env file with appropriate defaults for different environments
 */

import { existsSync, writeFileSync, readFileSync } from 'fs'
import { join } from 'path'

interface EnvTemplate {
	[key: string]: string
}

const envTemplates: Record<string, EnvTemplate> = {
	development: {
		NODE_ENV: 'development',
		PORT: '3000',
		JWT_SECRET: 'dev-secret-key-not-for-production-change-this-in-production',
		JWT_EXPIRES_IN: '24h',
		DB_PATH: './data/database.sqlite',
		DB_MAX_CONNECTIONS: '10',
		BCRYPT_ROUNDS: '12',
		CORS_ORIGIN: 'http://localhost:3000,http://localhost:5173',
		CORS_CREDENTIALS: 'true',
		LOG_LEVEL: 'debug',
	},
	test: {
		NODE_ENV: 'test',
		PORT: '0',
		JWT_SECRET: 'test-secret-key-for-testing-only',
		JWT_EXPIRES_IN: '1h',
		DB_PATH: ':memory:',
		BCRYPT_ROUNDS: '4',
		CORS_ORIGIN: 'http://localhost:3000',
		CORS_CREDENTIALS: 'true',
		LOG_LEVEL: 'error',
	},
	production: {
		NODE_ENV: 'production',
		PORT: '3000',
		JWT_SECRET: 'CHANGE-THIS-TO-A-SECURE-32-CHAR-MINIMUM-SECRET',
		JWT_EXPIRES_IN: '24h',
		DB_PATH: '/app/data/database.sqlite',
		DB_MAX_CONNECTIONS: '20',
		BCRYPT_ROUNDS: '12',
		CORS_ORIGIN: 'https://yourdomain.com',
		CORS_CREDENTIALS: 'true',
		LOG_LEVEL: 'info',
	},
}

function generateEnvContent(template: EnvTemplate): string {
	let content = `# Environment configuration\n`
	content += `# Generated by setup-env script\n\n`

	const categories = {
		'Server Configuration': ['NODE_ENV', 'PORT'],
		'JWT Configuration': ['JWT_SECRET', 'JWT_EXPIRES_IN'],
		'Database Configuration': ['DB_PATH', 'DB_MAX_CONNECTIONS'],
		'Security Configuration': ['BCRYPT_ROUNDS'],
		'CORS Configuration': ['CORS_ORIGIN', 'CORS_CREDENTIALS'],
		'Logging Configuration': ['LOG_LEVEL'],
	}

	for (const [category, keys] of Object.entries(categories)) {
		content += `# ${category}\n`
		for (const key of keys) {
			if (template[key]) {
				content += `${key}=${template[key]}\n`
			}
		}
		content += '\n'
	}

	return content
}

function backupExistingEnv(): void {
	const envPath = '.env'
	const backupPath = `.env.backup.${Date.now()}`

	if (existsSync(envPath)) {
		const content = readFileSync(envPath, 'utf-8')
		writeFileSync(backupPath, content)
		console.log(`üìã Existing .env backed up to ${backupPath}`)
	}
}

async function setupEnvironment() {
	try {
		const args = process.argv.slice(2)
		const environment = args[0] || 'development'
		const force = args.includes('--force')

		if (!envTemplates[environment]) {
			console.error(`‚ùå Unknown environment: ${environment}`)
			console.log('Available environments: development, test, production')
			process.exit(1)
		}

		const envPath = '.env'

		// Check if .env already exists
		if (existsSync(envPath) && !force) {
			console.log(
				'‚ö†Ô∏è  .env file already exists. Use --force to overwrite or remove it manually.',
			)
			console.log('Current .env content:')
			console.log(readFileSync(envPath, 'utf-8'))
			return
		}

		// Backup existing .env if it exists
		if (existsSync(envPath)) {
			backupExistingEnv()
		}

		// Generate and write new .env
		const template = envTemplates[environment]
		const content = generateEnvContent(template)

		writeFileSync(envPath, content)

		console.log(`‚úÖ Created .env file for ${environment} environment`)
		console.log(`üìç Location: ${join(process.cwd(), envPath)}`)

		// Show important notes based on environment
		if (environment === 'production') {
			console.log('\n‚ö†Ô∏è  IMPORTANT PRODUCTION NOTES:')
			console.log('1. Change JWT_SECRET to a secure 32+ character string')
			console.log('2. Update CORS_ORIGIN to your actual domain')
			console.log(
				'3. Ensure DB_PATH directory exists and has proper permissions',
			)
			console.log('4. Review all configuration values before deployment')
		} else if (environment === 'development') {
			console.log('\nüí° Development setup complete!')
			console.log(
				'Run `bun run setup` to install dependencies and initialize database',
			)
		}
	} catch (error) {
		console.error('‚ùå Environment setup failed:', error)
		process.exit(1)
	}
}

// Show usage if no arguments
if (process.argv.length === 2) {
	console.log('üîß Environment Setup Script\n')
	console.log('Usage: bun run setup-env <environment> [--force]\n')
	console.log('Environments:')
	console.log('  development  - Local development with debug logging')
	console.log('  test         - Testing with in-memory database')
	console.log('  production   - Production with security defaults\n')
	console.log('Options:')
	console.log('  --force      - Overwrite existing .env file\n')
	console.log('Examples:')
	console.log('  bun run setup-env development')
	console.log('  bun run setup-env production --force')
	process.exit(0)
}

// Run if called directly
if (import.meta.main) {
	await setupEnvironment()
}

export { setupEnvironment, envTemplates }
